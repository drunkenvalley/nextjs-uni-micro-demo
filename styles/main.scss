@use "reset.scss" as *;
@use "variables.scss" as *;
@use "mixins.scss" as *;

/* Composition */
.container {
    max-width: 1200px;
    margin-inline: auto;
}

.flex {
    display: flex;

    &-inline {
        display: inline-flex;
    }
}

.flow > * + * {
    margin-block-start: get-size(1, $unit: "em");
}

.grid {
    @include all-media {
        display: grid;
        grid-template-columns: repeat(6, 1fr);
    }
}

/* Utility */
body {
    font-family: var(--font-poppins);
    font-weight: 200;
    --template-transition: all 100ms ease-in-out;
}

.bg {
    @include use-map ($colors) using ($value) {
        background-color: $value;
    }
}

.border {
    border-style: solid;
    border-width: .1em;

    @include use-map ($colors) using ($value) {
        border-color: $value !important;
    }
}

.gap {
    @include use-map ($spacing-multiplier) using ($value) {
        gap: #{$value}rem;

        &-col {
            column-gap: #{$value}rem;
        }
        &-row {
            row-gap: #{$value}rem;
        }
    }
}

.m { @include all-spacing($spacing-multiplier, "margin"); }
.mr { @include all-spacing($spacing-multiplier, "margin", $unit: "em"); }   // "Intuitively", the 'r' here is for 'relative'... 

.p { @include all-spacing($spacing-multiplier, "padding"); }
.pr { @include all-spacing($spacing-multiplier, "padding", $unit: "em"); }  // It changes with the size of the element it's in.

.text {
    @include use-map ($colors) using ($value) {
        color: $value;
    }
}

@keyframes spinner-border {
    100% {
        transform: rotate(360deg);
    }
}

.align-items-end {
    align-items: flex-end;
}
.justify-space-between {
    justify-content: space-between;
}

/* Block */
a {
    transition: var(--template-transition);
    position: relative;
    text-decoration: none;
    outline-offset: .25em;

    @include before {
        transition: var(--template-transition);
        position: absolute;
        bottom: 0;
        left: 0;
        right: 100%;
        height: .05em;
        background-color: currentColor;
        border-radius: .15em;
    }
    @include hover {
        color: get-color("purp");

        @include before {
            right: max(calc(100% - 4ch), 40%);
        }
    }
    @include active {
        color: get-color("fire");
    }
    &:visited {
        color: get-color("blue");
    }
}

button, .button {
    transition: var(--template-transition);
    position: relative;
    border-color: currentColor;
    border-radius: .2em;
    border-style: solid;
    border-width: .1em;
    padding: get-size(1, "em");
    background-color: transparent;
    color: get-color("blue");

    @include before {
        transition: var(--template-transition);
        position: absolute;
        height: .075em;
        left: get-size(1, "em");
        right: 100%;
        bottom: get-size(1, "em");
        transform: translateY(50%);
        background-color: currentColor;
        border-radius: .15em;
    }
    @include hover {
        color: get-color("purp");

        @include before {
            right: max(calc(100% - 8ch), 40%);
        }
    }
    @include active {
        color: get-color("fire");
    }
    &[disabled] {
        color: get-color("gray");

        &::before {
            content: unset
        }
    }
}

header {
    margin-block-end: get-size(2);
    border-width: 1px;
    border-block-start-width: 0;
    border-color: get-color("gray");
    border-style: solid;
    border-bottom-left-radius: calc(get-size(1));
    border-bottom-right-radius: calc(get-size(1));
    padding: get-size(2);
    text-align: right;
}

.contact {
    &-grid {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: get-size(2);
    }
    
    &-block {
        width: 100%;
        aspect-ratio: 3.370 / 2.125;
        border-radius: get-size(1);
        border-color: get-color("gray");
        border-width: 1px;
        border-style: solid;
        padding: get-size(3);

        display: flex;
        flex-flow: column;
        
        section {
            flex-grow: 1;
        }

        h3 {
            display: flex;
            justify-content: space-between;
        }

        ul {
            display: flex;
            list-style-type: none;
            margin: 0;
            padding: 0;
        }
    }
}

.form-field {
    position: relative;
    label {
        position: absolute;
        left: 0;
        bottom: 0;
        height: 100%;
        width: 100%;
        display: flex;
        opacity: 1;
        align-items: center;
        padding: get-size(1);
        transform: var(--template-transition);
    }
    input {
        width: 100%;

        &::placeholder {
            color: transparent;
        }
        &:focus, &:active {
            &::placeholder {
                color: get-color("gray");
            }
            & + label {
                opacity: 0;
            }
        }
        &:not(:placeholder-shown) + label {
            opacity: 0;
        }
    }
}

.spinner {
    display: inline-block;
    width: 2rem;
    height: 2rem;
    vertical-align: text-bottom;
    border: .25em solid currentColor;
    border-right-color: currentcolor;
    border-right-color: transparent;
    border-radius: 50%;
    -webkit-animation: spinner-border .75s linear infinite;
    animation: spinner-border .75s linear infinite;
}

/* Exception */
button.contact-block {
    display: flex;
    align-items: center;
    justify-content: center;
    border-style: dashed;

    @include before {
        bottom: get-size(3);
        left: get-size(3);
    }

    @include hover {
        @include before {
            right: 40%;
        }
    }
}
button.icon {
    line-height: 1rem;
    padding: calc(get-size(1)*.5);
    border-color: transparent;
    transition: var(--template-transition);

    @include hover {
        border-color: currentColor;
    }

    &::before {
        content: unset;
    }
}