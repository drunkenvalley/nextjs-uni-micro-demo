@use "reset.scss" as *;
@use "variables.scss" as *;
@use "mixins.scss" as *;

/* Composition */
.container {
    max-width: 1200px;
    margin-inline: auto;
}

.flex {
    display: flex;

    &-inline {
        display: inline-flex;
    }
}

.flow > * + * {
    margin-block-start: get-size(1, $unit: "em");
}

.grid {
    @include all-media {
        display: grid;
        grid-template-columns: repeat(6, 1fr);
    }
}

/* Utility */
body {
    font-family: var(--font-poppins);
    font-weight: 200;
    --template-transition: all 100ms ease-in-out;
}

.bg {
    @include use-map ($colors) using ($value) {
        background-color: $value;
    }
}

.border {
    border-style: solid;
    border-width: .1em;

    @include use-map ($colors) using ($value) {
        border-color: $value;
    }
}

.gap {
    @include use-map ($spacing-multiplier) using ($value) {
        gap: #{$value}rem;

        &-col {
            column-gap: #{$value}rem;
        }
        &-row {
            row-gap: #{$value}rem;
        }
    }
}

.m { @include all-spacing($spacing-multiplier, "margin"); }
.mr { @include all-spacing($spacing-multiplier, "margin", $unit: "em"); }   // "Intuitively", the 'r' here is for 'relative'... 

.p { @include all-spacing($spacing-multiplier, "padding"); }
.pr { @include all-spacing($spacing-multiplier, "padding", $unit: "em"); }  // It changes with the size of the element it's in.

.text {
    @include use-map ($colors) using ($value) {
        color: $value;
    }
}

/* Block */
a {
    transition: var(--template-transition);
    position: relative;
    text-decoration: none;
    outline-offset: .25em;

    @include before {
        transition: var(--template-transition);
        position: absolute;
        bottom: 0;
        left: 0;
        right: 100%;
        height: .05em;
        background-color: currentColor;
        border-radius: .15em;
    }
    @include hover {
        color: get-color("purp");

        @include before {
            right: max(calc(100% - 4ch), 40%);
        }
    }
    @include active {
        color: get-color("fire");
    }
    &:visited {
        color: get-color("blue");
    }
}

button, .button {
    transition: var(--template-transition);
    position: relative;
    border-color: currentColor;
    border-radius: .2em;
    border-style: solid;
    border-width: .1em;
    padding: get-size(1, "em");
    background-color: transparent;
    color: get-color("blue");

    @include before {
        transition: var(--template-transition);
        position: absolute;
        height: .075em;
        left: get-size(1, "em");
        right: 100%;
        bottom: get-size(1, "em");
        transform: translateY(50%);
        background-color: currentColor;
        border-radius: .15em;
    }
    @include hover {
        color: get-color("purp");

        @include before {
            right: max(calc(100% - 8ch), 40%);
        }
    }
    @include active {
        color: get-color("fire");
    }
}

/* Exception */